// // show databases;

// use test;
// // show collections;

// // Exerc√≠cio 1: Retorne o documento com o _id igual a 8.
// // Primeiro parametro √© um where
// db.bios.find({_id: 8});

// // Exerc√≠cio 2: Retorne o documento com o _id igual a 8, mas s√≥ exiba os atributos: _id e name.
// // Segundo campo √© um includes
// // 1 para incluir e 0 para n√£o
// db.bios.find({_id: 8}, {name: 1, });

// //  üöÄ Exerc√≠cio 3: Retorne apenas os atributos name e birth do documento com o _id igual a 8.
// db.bios.find({_id: 8}, {name: 1, birth: 1, _id: 0});

// // Exerc√≠cio 4: Retorne todos os documentos em que o atributo name.first seja igual a John, utilizando o m√©todo pretty().
// // Utilizando dot notation posso navegar pelo valor do objeto ao usar where
// db.bios.find({"name.first": "John"}).pretty();

// // Exerc√≠cio 5: Retorne os 3 primeiros documentos da cole√ß√£o bios utilizando o m√©todo pretty().
// // Como o nome sugere, o limit limita o tamanho do retorno
// db.bios.find().limit(3).pretty();

// // Exerc√≠cio 6: Retorne 2 documentos da cole√ß√£o bios pulando os 5 primeiros documentos.
// // O skip pular objetos
// db.bios.find().skip(5).limit(2).pretty();

//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\

use test;

// üöÄ Exerc√≠cio 7: Retorne a quantidade de documentos da cole√ß√£o books.
// Conta a quantidade de documentos da collection 
db.books.countDocuments({})

// üöÄ Exerc√≠cio 8: Conte quantos livros existem com o status = "PUBLISH".
db.books.countDocuments({
  status: "PUBLISH"
})

// üöÄ Exerc√≠cio 9: Exiba os atributos title, isbn e pageCount dos 3 primeiros livros. N√ÉO retorne o atributo _id.
db.books.find({}, {title: 1, isbn: 1, pageCount: 1, _id: 0}).limit(3);

// Exerc√≠cio 10: Pule 5 documentos e exiba os atributos _id, title, authors e status dos livros com o status = "MEAP", limitando-se a 10 documentos.
db.books.find({status: "MEAP"}, {
  title: 1,
  authors: 1,
  status: 1
}).skip(5).limit(10)

// Caso eu n√£o omita o id no includes, ele sempre vai retornar